import{T as n,n as b,F as q,o,G as a,P as g,r as d,H as T,a as p,e as f,S as D}from"./tools-5e3ca259.js";import{C as k}from"./CrossFade-70d3ec39.js";import{S as R}from"./Split-6f7bdd2b.js";class S extends n{constructor(t){super(t),this.name="ToneAudioWorklet",this.workletOptions={},this.onprocessorerror=b;const s=URL.createObjectURL(new Blob([q()],{type:"text/javascript"})),e=this._audioWorkletName();this._dummyGain=this.context.createGain(),this._dummyParam=this._dummyGain.gain,this.context.addAudioWorkletModule(s,e).then(()=>{this.disposed||(this._worklet=this.context.createAudioWorkletNode(e,this.workletOptions),this._worklet.onprocessorerror=this.onprocessorerror.bind(this),this.onReady(this._worklet))})}dispose(){return super.dispose(),this._dummyGain.disconnect(),this._worklet&&(this._worklet.port.postMessage("dispose"),this._worklet.disconnect()),this}}class c extends S{constructor(){super(o(c.getDefaults(),arguments,["delayTime","resonance"])),this.name="FeedbackCombFilter";const t=o(c.getDefaults(),arguments,["delayTime","resonance"]);this.input=new a({context:this.context}),this.output=new a({context:this.context}),this.delayTime=new g({context:this.context,value:t.delayTime,units:"time",minValue:0,maxValue:1,param:this._dummyParam,swappable:!0}),this.resonance=new g({context:this.context,value:t.resonance,units:"normalRange",param:this._dummyParam,swappable:!0}),d(this,["resonance","delayTime"])}_audioWorkletName(){return T}static getDefaults(){return Object.assign(n.getDefaults(),{delayTime:.1,resonance:.5})}onReady(t){p(this.input,t,this.output);const s=t.parameters.get("delayTime");this.delayTime.setParam(s);const e=t.parameters.get("feedback");this.resonance.setParam(e)}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.delayTime.dispose(),this.resonance.dispose(),this}}class h extends n{constructor(){super(o(h.getDefaults(),arguments,["frequency","type"])),this.name="OnePoleFilter";const t=o(h.getDefaults(),arguments,["frequency","type"]);this._frequency=t.frequency,this._type=t.type,this.input=new a({context:this.context}),this.output=new a({context:this.context}),this._createFilter()}static getDefaults(){return Object.assign(n.getDefaults(),{frequency:880,type:"lowpass"})}_createFilter(){const t=this._filter,s=this.toFrequency(this._frequency),e=1/(2*Math.PI*s);if(this._type==="lowpass"){const i=1/(e*this.context.sampleRate),r=i-1;this._filter=this.context.createIIRFilter([i,0],[1,r])}else{const i=1/(e*this.context.sampleRate)-1;this._filter=this.context.createIIRFilter([1,-1],[1,i])}this.input.chain(this._filter,this.output),t&&this.context.setTimeout(()=>{this.disposed||(this.input.disconnect(t),t.disconnect())},this.blockTime)}get frequency(){return this._frequency}set frequency(t){this._frequency=t,this._createFilter()}get type(){return this._type}set type(t){this._type=t,this._createFilter()}getFrequencyResponse(t=128){const s=new Float32Array(t);for(let r=0;r<t;r++){const F=Math.pow(r/t,2)*(2e4-20)+20;s[r]=F}const e=new Float32Array(t),i=new Float32Array(t);return this._filter.getFrequencyResponse(s,e,i),e}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this._filter.disconnect(),this}}class l extends n{constructor(){super(o(l.getDefaults(),arguments,["delayTime","resonance","dampening"])),this.name="LowpassCombFilter";const t=o(l.getDefaults(),arguments,["delayTime","resonance","dampening"]);this._combFilter=this.output=new c({context:this.context,delayTime:t.delayTime,resonance:t.resonance}),this.delayTime=this._combFilter.delayTime,this.resonance=this._combFilter.resonance,this._lowpass=this.input=new h({context:this.context,frequency:t.dampening,type:"lowpass"}),this._lowpass.connect(this._combFilter)}static getDefaults(){return Object.assign(n.getDefaults(),{dampening:3e3,delayTime:.1,resonance:.5})}get dampening(){return this._lowpass.frequency}set dampening(t){this._lowpass.frequency=t}dispose(){return super.dispose(),this._combFilter.dispose(),this._lowpass.dispose(),this}}class u extends n{constructor(){super(o(u.getDefaults(),arguments,["channels"])),this.name="Merge";const t=o(u.getDefaults(),arguments,["channels"]);this._merger=this.output=this.input=this.context.createChannelMerger(t.channels)}static getDefaults(){return Object.assign(n.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._merger.disconnect(),this}}class y extends n{constructor(t){super(t),this.name="StereoEffect",this.input=new a({context:this.context}),this.input.channelCount=2,this.input.channelCountMode="explicit",this._dryWet=this.output=new k({context:this.context,fade:t.wet}),this.wet=this._dryWet.fade,this._split=new R({context:this.context,channels:2}),this._merge=new u({context:this.context,channels:2}),this.input.connect(this._split),this.input.connect(this._dryWet.a),this._merge.connect(this._dryWet.b),d(this,["wet"])}connectEffectLeft(...t){this._split.connect(t[0],0,0),p(...t),f(t[t.length-1],this._merge,0,0)}connectEffectRight(...t){this._split.connect(t[0],1,0),p(...t),f(t[t.length-1],this._merge,0,1)}static getDefaults(){return Object.assign(n.getDefaults(),{wet:1})}dispose(){return super.dispose(),this._dryWet.dispose(),this._split.dispose(),this._merge.dispose(),this}}const _=[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100],x=[225,556,441,341];class m extends y{constructor(){super(o(m.getDefaults(),arguments,["roomSize","dampening"])),this.name="Freeverb",this._combFilters=[],this._allpassFiltersL=[],this._allpassFiltersR=[];const t=o(m.getDefaults(),arguments,["roomSize","dampening"]);this.roomSize=new D({context:this.context,value:t.roomSize,units:"normalRange"}),this._allpassFiltersL=x.map(s=>{const e=this.context.createBiquadFilter();return e.type="allpass",e.frequency.value=s,e}),this._allpassFiltersR=x.map(s=>{const e=this.context.createBiquadFilter();return e.type="allpass",e.frequency.value=s,e}),this._combFilters=_.map((s,e)=>{const i=new l({context:this.context,dampening:t.dampening,delayTime:s});return e<_.length/2?this.connectEffectLeft(i,...this._allpassFiltersL):this.connectEffectRight(i,...this._allpassFiltersR),this.roomSize.connect(i.resonance),i}),d(this,["roomSize"])}static getDefaults(){return Object.assign(y.getDefaults(),{roomSize:.7,dampening:3e3})}get dampening(){return this._combFilters[0].dampening}set dampening(t){this._combFilters.forEach(s=>s.dampening=t)}dispose(){return super.dispose(),this._allpassFiltersL.forEach(t=>t.disconnect()),this._allpassFiltersR.forEach(t=>t.disconnect()),this._combFilters.forEach(t=>t.dispose()),this.roomSize.dispose(),this}}export{m as F};
