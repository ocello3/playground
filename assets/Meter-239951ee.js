import{X as g,o as s,Y as p,S as m,M as w,G as y,r as q,Q as o,l as d,Z as f,T as i,_,A as E,p as O,x as A,$ as S,a0 as j}from"./tools-c877827f.js";import{S as V}from"./Split-3e1ffd80.js";class r extends g{constructor(){super(s(r.getDefaults(),arguments)),this.name="ModulationSynth";const t=s(r.getDefaults(),arguments);this._carrier=new p({context:this.context,oscillator:t.oscillator,envelope:t.envelope,onsilence:()=>this.onsilence(this),volume:-10}),this._modulator=new p({context:this.context,oscillator:t.modulation,envelope:t.modulationEnvelope,volume:-10}),this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope,this.modulation=this._modulator.oscillator,this.modulationEnvelope=this._modulator.envelope,this.frequency=new m({context:this.context,units:"frequency"}),this.detune=new m({context:this.context,value:t.detune,units:"cents"}),this.harmonicity=new w({context:this.context,value:t.harmonicity,minValue:0}),this._modulationNode=new y({context:this.context,gain:0}),q(this,["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"])}static getDefaults(){return Object.assign(g.getDefaults(),{harmonicity:3,oscillator:Object.assign(o(f.getDefaults(),[...Object.keys(d.getDefaults()),"frequency","detune"]),{type:"sine"}),envelope:Object.assign(o(_.getDefaults(),Object.keys(i.getDefaults())),{attack:.01,decay:.01,sustain:1,release:.5}),modulation:Object.assign(o(f.getDefaults(),[...Object.keys(d.getDefaults()),"frequency","detune"]),{type:"square"}),modulationEnvelope:Object.assign(o(_.getDefaults(),Object.keys(i.getDefaults())),{attack:.5,decay:0,sustain:1,release:.5})})}_triggerEnvelopeAttack(t,e){this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t,e)}_triggerEnvelopeRelease(t){return this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this}getLevelAtTime(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)}dispose(){return super.dispose(),this._carrier.dispose(),this._modulator.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._modulationNode.dispose(),this}}class v extends r{constructor(){super(s(v.getDefaults(),arguments)),this.name="AMSynth",this._modulationScale=new E({context:this.context}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output)}dispose(){return super.dispose(),this._modulationScale.dispose(),this}}class a extends i{constructor(){super(s(a.getDefaults(),arguments,["type","size"])),this.name="Analyser",this._analysers=[],this._buffers=[];const t=s(a.getDefaults(),arguments,["type","size"]);this.input=this.output=this._gain=new y({context:this.context}),this._split=new V({context:this.context,channels:t.channels}),this.input.connect(this._split),O(t.channels,1);for(let e=0;e<t.channels;e++)this._analysers[e]=this.context.createAnalyser(),this._split.connect(this._analysers[e],e,0);this.size=t.size,this.type=t.type}static getDefaults(){return Object.assign(i.getDefaults(),{size:1024,smoothing:.8,type:"fft",channels:1})}getValue(){return this._analysers.forEach((t,e)=>{const n=this._buffers[e];this._type==="fft"?t.getFloatFrequencyData(n):this._type==="waveform"&&t.getFloatTimeDomainData(n)}),this.channels===1?this._buffers[0]:this._buffers}get size(){return this._analysers[0].frequencyBinCount}set size(t){this._analysers.forEach((e,n)=>{e.fftSize=t*2,this._buffers[n]=new Float32Array(t)})}get channels(){return this._analysers.length}get type(){return this._type}set type(t){A(t==="waveform"||t==="fft",`Analyser: invalid type: ${t}`),this._type=t}get smoothing(){return this._analysers[0].smoothingTimeConstant}set smoothing(t){this._analysers.forEach(e=>e.smoothingTimeConstant=t)}dispose(){return super.dispose(),this._analysers.forEach(t=>t.disconnect()),this._split.dispose(),this._gain.dispose(),this}}class l extends i{constructor(){super(s(l.getDefaults(),arguments)),this.name="MeterBase",this.input=this.output=this._analyser=new a({context:this.context,size:256,type:"waveform"})}dispose(){return super.dispose(),this._analyser.dispose(),this}}class h extends l{constructor(){super(s(h.getDefaults(),arguments,["smoothing"])),this.name="Meter",this._rms=0;const t=s(h.getDefaults(),arguments,["smoothing"]);this.input=this.output=this._analyser=new a({context:this.context,size:256,type:"waveform",channels:t.channels}),this.smoothing=t.smoothing,this.normalRange=t.normalRange}static getDefaults(){return Object.assign(l.getDefaults(),{smoothing:.8,normalRange:!1,channels:1})}getLevel(){return S("'getLevel' has been changed to 'getValue'"),this.getValue()}getValue(){const t=this._analyser.getValue(),n=(this.channels===1?[t]:t).map(u=>{const x=u.reduce((b,c)=>b+c*c,0),D=Math.sqrt(x/u.length);return this._rms=Math.max(D,this._rms*this.smoothing),this.normalRange?this._rms:j(this._rms)});return this.channels===1?n[0]:n}get channels(){return this._analyser.channels}dispose(){return super.dispose(),this._analyser.dispose(),this}}export{v as A,h as M};
