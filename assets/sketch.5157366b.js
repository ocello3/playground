import{T as E,o as P,G as O,p as $,u as j,w as H,v as N,s as Y,h as q,t as _,l as W,c as M,d as A}from"./tools.dbab5185.js";import{G as J}from"./GrainPlayer.31daffd0.js";import{p as S}from"./index.95ce4ac5.js";class f extends E{constructor(){super(P(f.getDefaults(),arguments,["channels"])),this.name="Split";const t=P(f.getDefaults(),arguments,["channels"]);this._splitter=this.input=this.output=this.context.createChannelSplitter(t.channels),this._internalChannels=[this._splitter]}static getDefaults(){return Object.assign(E.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._splitter.disconnect(),this}}class T extends E{constructor(){super(P(T.getDefaults(),arguments,["type","size"])),this.name="Analyser",this._analysers=[],this._buffers=[];const t=P(T.getDefaults(),arguments,["type","size"]);this.input=this.output=this._gain=new O({context:this.context}),this._split=new f({context:this.context,channels:t.channels}),this.input.connect(this._split),$(t.channels,1);for(let n=0;n<t.channels;n++)this._analysers[n]=this.context.createAnalyser(),this._split.connect(this._analysers[n],n,0);this.size=t.size,this.type=t.type}static getDefaults(){return Object.assign(E.getDefaults(),{size:1024,smoothing:.8,type:"fft",channels:1})}getValue(){return this._analysers.forEach((t,n)=>{const s=this._buffers[n];this._type==="fft"?t.getFloatFrequencyData(s):this._type==="waveform"&&t.getFloatTimeDomainData(s)}),this.channels===1?this._buffers[0]:this._buffers}get size(){return this._analysers[0].frequencyBinCount}set size(t){this._analysers.forEach((n,s)=>{n.fftSize=t*2,this._buffers[s]=new Float32Array(t)})}get channels(){return this._analysers.length}get type(){return this._type}set type(t){j(t==="waveform"||t==="fft",`Analyser: invalid type: ${t}`),this._type=t}get smoothing(){return this._analysers[0].smoothingTimeConstant}set smoothing(t){this._analysers.forEach(n=>n.smoothingTimeConstant=t)}dispose(){return super.dispose(),this._analysers.forEach(t=>t.disconnect()),this._split.dispose(),this._gain.dispose(),this}}class I extends E{constructor(){super(P(I.getDefaults(),arguments)),this.name="MeterBase",this.input=this.output=this._analyser=new T({context:this.context,size:256,type:"waveform"})}dispose(){return super.dispose(),this._analyser.dispose(),this}}class V extends I{constructor(){super(P(V.getDefaults(),arguments,["smoothing"])),this.name="Meter",this._rms=0;const t=P(V.getDefaults(),arguments,["smoothing"]);this.input=this.output=this._analyser=new T({context:this.context,size:256,type:"waveform",channels:t.channels}),this.smoothing=t.smoothing,this.normalRange=t.normalRange}static getDefaults(){return Object.assign(I.getDefaults(),{smoothing:.8,normalRange:!1,channels:1})}getLevel(){return H("'getLevel' has been changed to 'getValue'"),this.getValue()}getValue(){const t=this._analyser.getValue(),s=(this.channels===1?[t]:t).map(a=>{const o=a.reduce((r,l)=>r+l*l,0),i=Math.sqrt(o/a.length);return this._rms=Math.max(i,this._rms*this.smoothing),this.normalRange?this._rms:N(this._rms)});return this.channels===1?s[0]:s}get channels(){return this._analyser.channels}dispose(){return super.dispose(),this._analyser.dispose(),this}}const L=()=>{const e=["right","right","left","left"];return{marginRate:.2,alignments:e,boxIntervalRate:.005,boxHeightRate:.5/e.length,playbackRateMin:.3,playbackRateMax:3.5,hues:[357,237],saturations:[68,68],brightnesses:[80,80],saturationRange:15,brightnessRange:65,loopRangeLineYPosRate:.65}},Q=L(),U=(e,t)=>{t.pages[1].addInput(e,"marginRate",{step:.1,min:.1,max:1})},K="/playground/assets/track_1.043a5dc7.mp3",X="/playground/assets/track_2.ea523552.mp3",D=async e=>{const t=new W;return await t.load(e),t},x=e=>e.duration,Z=(e,t,n)=>{const s=new J(e).connect(n);return s.volume.value=-5,s.loop=!0,s.loopStart=0,s.grainSize=t,s},z=async()=>{const e=await Y(),t=[await D(K),await D(X)],n=[x(t[0]),x(t[1]),x(t[0]),x(t[1])],s=n.map(()=>new q().toDestination());s.forEach((o,i)=>{o.set({pan:_.map(i,0,n.length,-1,1)})});const a=n.map((o,i)=>Z(t[i%2],o,s[i]));return{se:e,panners:s,players:a,data:{durations:n}}},F=await z(),B=(e,t,n,s)=>{s==2&&e.players.forEach(a=>a.start()),t.loopRetentionFrames.forEach((a,o)=>{a===0&&(e.panners[o].pan.value=n.panValues[o],e.players[o].reverse=t.loopIsReverses[o],e.players[o].loopStart=t.loopStartTimes[o],e.players[o].grainSize=t.loopGrainSizes[o],e.players[o].playbackRate=t.playbackRates[o])})},C=(e,t)=>{const n=e.data.durations,s=n.reduce((m,R)=>R>m?R:m,0),a=n.map(()=>0),o=n.map(m=>m),i=n.map(()=>!1),r=n.map(()=>!1),l=n.map(()=>!1),p=n.map(()=>0),u=n.map(()=>t*.001),d=n.map(()=>0),h=n.map(()=>1),y=n.map(()=>1),c=n.map(()=>new V);return e.players.forEach((m,R)=>m.connect(c[R])),{durations:n,longestDuration:s,loopStartTimes:a,loopEndTimes:o,loopIsReverses:i,loopIsSwitches:r,loopGrainSizes:o,loopIsOvers:l,loopStampTimes:p,loopElapsedTimes:u,loopProgressRates:d,loopRetentionFrames:h,playbackRates:y,volumes:c}},tt=C(F,0),st=(e,t,n)=>{const s={...e};return s.loopRetentionFrames=e.loopRetentionFrames.map((a,o)=>a>0?a-1:e.durations[o]*60),s.loopIsSwitches=s.loopRetentionFrames.map(a=>a===0),s.loopStartTimes=e.loopStartTimes.map((a,o)=>s.loopIsSwitches[o]?Math.random()*e.durations[o]:a),s.loopEndTimes=e.loopEndTimes.map((a,o)=>s.loopIsSwitches[o]?Math.random()*e.durations[o]:a),s.loopIsReverses=e.loopIsReverses.map((a,o)=>s.loopIsSwitches[o]?s.loopStartTimes[o]>s.loopEndTimes[o]:a),s.loopIsOvers=e.loopElapsedTimes.map((a,o)=>a>s.durations[o]/s.playbackRates[o]),s.loopStampTimes=e.loopStampTimes.map((a,o)=>s.loopIsOvers[o]?n*.001:a),s.loopElapsedTimes=e.loopElapsedTimes.map((a,o)=>n*.001-s.loopStampTimes[o]),s.loopProgressRates=s.loopElapsedTimes.map((a,o)=>a/e.durations[o]*s.playbackRates[o]),s.loopGrainSizes=s.loopEndTimes.map((a,o)=>Math.abs(a-s.loopStartTimes[o])),s.playbackRates=e.playbackRates.map((a,o)=>s.loopIsSwitches[o]?_.map(Math.random(),0,1,t.playbackRateMin,t.playbackRateMax):a),s},k=(e,t,n,s)=>{const{marginRate:a}=n,i=t*(1-a)/e.longestDuration,r=s.data.durations.map(g=>g*i),l=n.alignments.map((g,b)=>{const w=t*a*.5;return g==="right"?w:t-r[b]-w}),p=s.data.durations.map((g,b)=>{const w=l[b],G=t/(s.data.durations.length+1)*(b+1);return new S.Vector().set(w,G)}),u=p.map((g,b)=>S.Vector.add(g,new S.Vector().set(r[b],0))),d=new S.Vector().set(t*n.boxIntervalRate,t*n.boxHeightRate),h=p.map((g,b)=>{const w=g.x-u[b].x;return Math.ceil(Math.abs(w/d.x))}),y=h.map((g,b)=>{const w=new S.Vector().set(0,d.y*-.5);return[S.Vector.add(p[b],w)]}),c=e.loopIsReverses.map(()=>0),m=e.loopIsReverses.map(()=>0),R=e.loopIsReverses.map(()=>[0]),v=p.map(g=>_.map(g.x,0,t,-1,1));return{bufferConvertRateToLength:i,fullLengths:r,margins:l,startPositions:p,endPositions:u,loopStartPositions:p,loopEndPositions:u,currentPositions:p,boxSize:d,boxNumbers:h,boxLAPositionArrays:y,boxHues:c,boxSaturations:m,boxBrightnessArrays:R,panValues:v}};k(tt,100,Q,F);const ot=(e,t,n,s)=>{const a={...e};return a.loopStartPositions=e.loopStartPositions.map((o,i)=>{if(!t.loopIsSwitches[i])return o;const r=o.copy(),l=t.loopStartTimes[i]/t.durations[i],u=e.fullLengths[i]*l+e.margins[i];return r.x=u,r}),a.loopEndPositions=e.loopEndPositions.map((o,i)=>{if(!t.loopIsSwitches[i])return o;const r=o.copy(),l=t.loopEndTimes[i]/t.durations[i],u=e.fullLengths[i]*l+e.margins[i];return r.x=u,r}),a.boxNumbers=e.boxNumbers.map((o,i)=>{if(!t.loopIsSwitches[i])return o;const r=a.loopStartPositions[i].x-a.loopEndPositions[i].x;return Math.ceil(Math.abs(r/e.boxSize.x))}),a.currentPositions=e.currentPositions.map((o,i)=>{const l=Math.abs(a.loopEndPositions[i].x-a.loopStartPositions[i].x)*t.loopProgressRates[i];return t.loopIsReverses[i]?(o.x=a.loopStartPositions[i].x-l,o):(o.x=a.loopStartPositions[i].x+l,o)}),a.boxLAPositionArrays=e.boxLAPositionArrays.map((o,i)=>{if(t.loopIsSwitches[i]||t.loopIsOvers[i]){const h=new S.Vector().set(0,e.boxSize.y*-.5);return[S.Vector.add(a.loopStartPositions[i],h)]}const r=t.loopIsReverses[i]?-1:1,l=o[o.length-1],p=Math.abs(a.currentPositions[i].x-l.x),u=Math.round(p/e.boxSize.x);if(u===0)return o;const d=Array.from(Array(u),(h,y)=>{const c=new S.Vector(e.boxSize.x*(y+1)*r,0);return S.Vector.add(l,c)});return o.concat(d)}),a.boxHues=t.loopIsReverses.map(o=>{const i=o?0:1;return n.hues[i]}),a.boxSaturations=t.loopIsReverses.map((o,i)=>{const r=o?1:0,l=n.saturations[r];return _.map(t.playbackRates[i],n.playbackRateMin,n.playbackRateMax,l-n.saturationRange,l+n.saturationRange)}),a.boxBrightnessArrays=a.boxLAPositionArrays.map((o,i)=>{const r=e.boxBrightnessArrays[i],l=o.length-r.length,p=t.volumes[i].getValue(),u=isFinite(p)?p:0,d=t.loopIsReverses[i]?1:0,h=n.brightnesses[d],y=_.map(u,-50,-20,h-n.brightnessRange,h+n.brightnessRange),c=_.constrain(y,h-n.brightnessRange,h+n.brightnessRange);if(l===0)return r[r.length-1]=c,r;if(l>=1){const m=Array.from(Array(l),()=>c);return r.concat(m)}else return o.map(()=>c)}),a.panValues=a.currentPositions.map(o=>_.map(o.x,0,s,-1,1)),a},et=(e,t,n,s)=>{const{startPositions:a,endPositions:o,loopStartPositions:i,loopEndPositions:r,boxLAPositionArrays:l,boxHues:p,boxSaturations:u,boxBrightnessArrays:d,boxSize:h}=e;s.push(),s.noStroke(),l.forEach((y,c)=>{const m=p[c],R=d[c],v=u[c];y.forEach((g,b)=>{s.push();const w=R[b];s.fill(m,w,v),s.rect(g.x,g.y,h.x,h.y),s.pop()})}),s.pop(),s.push(),s.noFill(),s.strokeWeight(1),s.strokeCap(s.SQUARE),a.forEach((y,c)=>{const m=t.loopIsReverses?1:0,R=p[c],v=n.saturations[m]+n.saturationRange,g=u[c];s.stroke(R,v,g,100),s.line(y.x,y.y+h.y*n.loopRangeLineYPosRate,o[c].x,o[c].y+h.y*n.loopRangeLineYPosRate)}),s.pop(),s.push(),s.noFill(),s.strokeWeight(2),s.strokeCap(s.PROJECT),i.forEach((y,c)=>{const m=t.loopIsReverses?1:0,R=p[c],v=n.saturations[m]+n.saturationRange,g=u[c];s.stroke(R,v,g),s.line(y.x,y.y+h.y*n.loopRangeLineYPosRate,r[c].x,r[c].y+h.y*n.loopRangeLineYPosRate)}),s.pop()},rt=e=>{const t=_.setSize("sketch");let n=M.setController();const s=L();let a,o,i;e.setup=async()=>{i=await z(),a=C(i,e.millis()),o=k(a,t,s,i),e.createCanvas(t,t);const r=M.setGui(e,n,i.se,!1);U(s,r),e.colorMode(e.HSB),e.noLoop(),A(e,t)},e.draw=()=>{if(i===void 0){e.noLoop();return}e.background(255),M.updateController(e,n),a=st(a,s,e.millis()),o=ot(o,a,s,t),et(o,a,s,e),A(e,t),B(i,a,o,e.frameCount)}};export{rt as sketch};
