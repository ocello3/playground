import{T as f,n as L,F as z,o as g,G as _,P as M,r as S,H as G,a as D,e as A,W as N,S as $,t as m,s as B,h as U,O as H,D as J,d as K,c as q}from"./tools.8ba16a64.js";import{p as u}from"./index.0d3abd3b.js";import{C as Q,E as T}from"./Effect.89bba44d.js";import{S as X}from"./Split.020ce720.js";class Y extends f{constructor(t){super(t),this.name="ToneAudioWorklet",this.workletOptions={},this.onprocessorerror=L;const o=URL.createObjectURL(new Blob([z()],{type:"text/javascript"})),e=this._audioWorkletName();this._dummyGain=this.context.createGain(),this._dummyParam=this._dummyGain.gain,this.context.addAudioWorkletModule(o,e).then(()=>{this.disposed||(this._worklet=this.context.createAudioWorkletNode(e,this.workletOptions),this._worklet.onprocessorerror=this.onprocessorerror.bind(this),this.onReady(this._worklet))})}dispose(){return super.dispose(),this._dummyGain.disconnect(),this._worklet&&(this._worklet.port.postMessage("dispose"),this._worklet.disconnect()),this}}class w extends Y{constructor(){super(g(w.getDefaults(),arguments,["delayTime","resonance"])),this.name="FeedbackCombFilter";const t=g(w.getDefaults(),arguments,["delayTime","resonance"]);this.input=new _({context:this.context}),this.output=new _({context:this.context}),this.delayTime=new M({context:this.context,value:t.delayTime,units:"time",minValue:0,maxValue:1,param:this._dummyParam,swappable:!0}),this.resonance=new M({context:this.context,value:t.resonance,units:"normalRange",param:this._dummyParam,swappable:!0}),S(this,["resonance","delayTime"])}_audioWorkletName(){return G}static getDefaults(){return Object.assign(f.getDefaults(),{delayTime:.1,resonance:.5})}onReady(t){D(this.input,t,this.output);const o=t.parameters.get("delayTime");this.delayTime.setParam(o);const e=t.parameters.get("feedback");this.resonance.setParam(e)}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.delayTime.dispose(),this.resonance.dispose(),this}}class x extends f{constructor(){super(g(x.getDefaults(),arguments,["frequency","type"])),this.name="OnePoleFilter";const t=g(x.getDefaults(),arguments,["frequency","type"]);this._frequency=t.frequency,this._type=t.type,this.input=new _({context:this.context}),this.output=new _({context:this.context}),this._createFilter()}static getDefaults(){return Object.assign(f.getDefaults(),{frequency:880,type:"lowpass"})}_createFilter(){const t=this._filter,o=this.toFrequency(this._frequency),e=1/(2*Math.PI*o);if(this._type==="lowpass"){const n=1/(e*this.context.sampleRate),a=n-1;this._filter=this.context.createIIRFilter([n,0],[1,a])}else{const n=1/(e*this.context.sampleRate)-1;this._filter=this.context.createIIRFilter([1,-1],[1,n])}this.input.chain(this._filter,this.output),t&&this.context.setTimeout(()=>{this.disposed||(this.input.disconnect(t),t.disconnect())},this.blockTime)}get frequency(){return this._frequency}set frequency(t){this._frequency=t,this._createFilter()}get type(){return this._type}set type(t){this._type=t,this._createFilter()}getFrequencyResponse(t=128){const o=new Float32Array(t);for(let a=0;a<t;a++){const c=Math.pow(a/t,2)*(2e4-20)+20;o[a]=c}const e=new Float32Array(t),n=new Float32Array(t);return this._filter.getFrequencyResponse(o,e,n),e}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this._filter.disconnect(),this}}class b extends f{constructor(){super(g(b.getDefaults(),arguments,["delayTime","resonance","dampening"])),this.name="LowpassCombFilter";const t=g(b.getDefaults(),arguments,["delayTime","resonance","dampening"]);this._combFilter=this.output=new w({context:this.context,delayTime:t.delayTime,resonance:t.resonance}),this.delayTime=this._combFilter.delayTime,this.resonance=this._combFilter.resonance,this._lowpass=this.input=new x({context:this.context,frequency:t.dampening,type:"lowpass"}),this._lowpass.connect(this._combFilter)}static getDefaults(){return Object.assign(f.getDefaults(),{dampening:3e3,delayTime:.1,resonance:.5})}get dampening(){return this._lowpass.frequency}set dampening(t){this._lowpass.frequency=t}dispose(){return super.dispose(),this._combFilter.dispose(),this._lowpass.dispose(),this}}class v extends f{constructor(){super(g(v.getDefaults(),arguments,["channels"])),this.name="Merge";const t=g(v.getDefaults(),arguments,["channels"]);this._merger=this.output=this.input=this.context.createChannelMerger(t.channels)}static getDefaults(){return Object.assign(f.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._merger.disconnect(),this}}class V extends f{constructor(t){super(t),this.name="StereoEffect",this.input=new _({context:this.context}),this.input.channelCount=2,this.input.channelCountMode="explicit",this._dryWet=this.output=new Q({context:this.context,fade:t.wet}),this.wet=this._dryWet.fade,this._split=new X({context:this.context,channels:2}),this._merge=new v({context:this.context,channels:2}),this.input.connect(this._split),this.input.connect(this._dryWet.a),this._merge.connect(this._dryWet.b),S(this,["wet"])}connectEffectLeft(...t){this._split.connect(t[0],0,0),D(...t),A(t[t.length-1],this._merge,0,0)}connectEffectRight(...t){this._split.connect(t[0],1,0),D(...t),A(t[t.length-1],this._merge,0,1)}static getDefaults(){return Object.assign(f.getDefaults(),{wet:1})}dispose(){return super.dispose(),this._dryWet.dispose(),this._split.dispose(),this._merge.dispose(),this}}class R extends T{constructor(){super(g(R.getDefaults(),arguments,["distortion"])),this.name="Distortion";const t=g(R.getDefaults(),arguments,["distortion"]);this._shaper=new N({context:this.context,length:4096}),this._distortion=t.distortion,this.connectEffect(this._shaper),this.distortion=t.distortion,this.oversample=t.oversample}static getDefaults(){return Object.assign(T.getDefaults(),{distortion:.4,oversample:"none"})}get distortion(){return this._distortion}set distortion(t){this._distortion=t;const o=t*100,e=Math.PI/180;this._shaper.setMap(n=>Math.abs(n)<.001?0:(3+o)*n*20*e/(Math.PI+o*Math.abs(n)))}get oversample(){return this._shaper.oversample}set oversample(t){this._shaper.oversample=t}dispose(){return super.dispose(),this._shaper.dispose(),this}}const j=[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100],P=[225,556,441,341];class F extends V{constructor(){super(g(F.getDefaults(),arguments,["roomSize","dampening"])),this.name="Freeverb",this._combFilters=[],this._allpassFiltersL=[],this._allpassFiltersR=[];const t=g(F.getDefaults(),arguments,["roomSize","dampening"]);this.roomSize=new $({context:this.context,value:t.roomSize,units:"normalRange"}),this._allpassFiltersL=P.map(o=>{const e=this.context.createBiquadFilter();return e.type="allpass",e.frequency.value=o,e}),this._allpassFiltersR=P.map(o=>{const e=this.context.createBiquadFilter();return e.type="allpass",e.frequency.value=o,e}),this._combFilters=j.map((o,e)=>{const n=new b({context:this.context,dampening:t.dampening,delayTime:o});return e<j.length/2?this.connectEffectLeft(n,...this._allpassFiltersL):this.connectEffectRight(n,...this._allpassFiltersR),this.roomSize.connect(n.resonance),n}),S(this,["roomSize"])}static getDefaults(){return Object.assign(V.getDefaults(),{roomSize:.7,dampening:3e3})}get dampening(){return this._combFilters[0].dampening}set dampening(t){this._combFilters.forEach(o=>o.dampening=t)}dispose(){return super.dispose(),this._allpassFiltersL.forEach(t=>t.disconnect()),this._allpassFiltersR.forEach(t=>t.disconnect()),this._combFilters.forEach(t=>t.dispose()),this.roomSize.dispose(),this}}const Z=()=>({light:{speed:.005,shadowDistRate:100,lightDistRate:.25},boader:{speed:.001},object:{count:10,speed_min:.1,speed_max:1,lengthRate_min:.1,lengthRate_max:.5},shadow:{colorRate:.7,alpha:35},background:{shadowColor:240,shadowAlpha:220,lightColor:100,lightAlpha:255},synth:{volReducRate:.7,vol_min:-30,vol_max:-10,freq_min:280,freq_max:920},freeverb:{dampening:1e3,roomSize:.6,wet:.4},dist:{distortion:.4,wet:.3}}),tt=(s,t)=>{const o=t.pages[1],e=o.addFolder({title:"light"});e.addInput(s.light,"speed",{step:.001,min:.001,max:.1}),e.addInput(s.light,"shadowDistRate",{step:.1,min:1,max:1e3}),e.addInput(s.light,"lightDistRate",{step:.01,min:.01,max:2}),o.addFolder({title:"boader"}).addInput(s.boader,"speed",{min:1e-4,max:.01});const a=o.addFolder({title:"object"});a.addInput(s.object,"speed_min",{min:.01,max:1}),a.addInput(s.object,"speed_max",{min:.1,max:10}),a.addInput(s.object,"lengthRate_min",{min:.01,max:.3}),a.addInput(s.object,"lengthRate_max",{min:.3,max:1});const i=o.addFolder({title:"shadow"});i.addInput(s.shadow,"alpha",{step:1,min:10,max:250}),i.addInput(s.shadow,"colorRate",{step:.01,min:.1,max:1});const c=t.pages[2],l=c.addFolder({title:"synth"});l.addInput(s.synth,"volReducRate",{step:.1,min:.1,max:10}),l.addInput(s.synth,"vol_min",{step:1,min:-60,max:-30}),l.addInput(s.synth,"vol_max",{step:1,min:-30,max:-0}),l.addInput(s.synth,"freq_min",{step:1,min:30,max:500}),l.addInput(s.synth,"freq_max",{step:1,min:500,max:1500});const r=c.addFolder({title:"freeverb"});r.addInput(s.freeverb,"dampening",{step:1,min:100,max:1500}),r.addInput(s.freeverb,"roomSize",{min:0,max:1}),r.addInput(s.freeverb,"wet",{min:0,max:1});const d=c.addFolder({title:"distortion"});d.addInput(s.dist,"distortion",{min:0,max:1}),d.addInput(s.dist,"wet",{min:0,max:1})},E=(s,t,o,e)=>{const n=e===void 0,a=(()=>{if(n)return Math.PI+s.angle;const h=e.angle+t.light.speed;return h>Math.PI*2?h-Math.PI*2:h})(),i=(()=>{const h=a<=s.angle,p=a>=Math.PI+s.angle;return h||p})(),c=n?!0:i!=e.isShadow,l=(()=>{const h=a/(Math.PI*2)-s.angle/(Math.PI*2),p=h<0?1+h:h;if(i){const k=p-.5;return m.map(Math.abs(k-.25),0,.25,1,0)}return m.map(Math.abs(p-.25),0,.25,1,0)})(),r=n?new u.Vector(o*.5,o*.5):e.start,d=(()=>{const h=p=>{const k=new u.Vector(0,0);return u.Vector.dist(r,k)*p};return c||n?h(i?t.light.shadowDistRate:t.light.lightDistRate):e.length})(),y=u.Vector.fromAngle(-1*a),I=u.Vector.add(r,u.Vector.mult(y,d));return{start:r,length:d,angle:a,angleRate:l,vec:y,end:I,isShadow:i,isSwitch:c}},O=(s,t,o)=>{const e=o===void 0,n=(()=>{if(e)return Math.PI;const y=o.angle-s.boader.speed;return y<0?Math.PI:y})(),a=u.Vector.fromAngle(n),i=t*Math.sqrt(2),c=new u.Vector(t*.5,t*.5),l=new u.Vector(i*.5*Math.cos(n),i*.5*Math.sin(n)),r=u.Vector.sub(c,l),d=u.Vector.add(c,l);return{vec:a,length:i,start:r,end:d,angle:n}},W=(s,t,o,e)=>{const n=e===void 0,a=(()=>n?Array.from(Array(t.object.count),()=>Math.random()):e.rates.map((h,p)=>e.isOvers[p]?Math.random():h))(),i=a.map(h=>m.map(h,0,1,t.object.speed_min,t.object.speed_max)),c=(()=>n?Array.from(Array(t.object.count),()=>Math.random()*s.length):e.intervals.map((h,p)=>e.isOvers[p]?0:h+i[p]))(),l=c.map(h=>u.Vector.add(s.start,u.Vector.mult(s.vec,h))),r=c.map(()=>u.Vector.fromAngle(s.angle+Math.PI*.5)),d=(()=>n?c.map(()=>Math.random()*o*.5):a.map(p=>m.map(p,0,1,t.object.lengthRate_max,t.object.lengthRate_min)).map(p=>o*p))(),y=l.map((h,p)=>u.Vector.add(h,u.Vector.mult(r[p],d[p]))),I=c.map(h=>h>s.length);return{rates:a,speeds:i,intervals:c,starts:l,vecs:r,lengths:d,ends:y,isOvers:I}},C=(s,t,o)=>{const e=o.starts,n=e.map((r,d)=>m.getIntersection(r,s.end,s.end,o.ends[d])),a=o.ends.map((r,d)=>m.getIntersection(r,n[d],t.start,t.end)),i=e.map((r,d)=>u.Vector.sub(n[d],r)),c=i.map(r=>u.Vector.normalize(r)),l=i.map(r=>u.Vector.mag(r));return{starts:e,ends:n,intersections:a,vecs:c,lengths:l}},et=(s,t,o,e,n)=>{const a=t.starts.map(l=>m.constrain(m.map(l.x,0,n,-1,1),-1,1)),i=t.rates.map(l=>m.map(s.isShadow?l/e.object.count:l*e.synth.volReducRate/e.object.count,0,1,e.synth.vol_min,e.synth.vol_max)),c=o.lengths.map(l=>m.constrain(m.map(l/n,0,72,e.synth.freq_min,e.synth.freq_max),e.synth.freq_min,e.synth.freq_max));return{pans:a,vols:i,freqs:c}},st=async s=>{const t=await B(),o=new F().toDestination(),e=new R(.8).connect(o),n=Array.from(Array(s.object.count),()=>new U().connect(e)),a=n.map(i=>new H().connect(i).start());return J.mute=!0,{se:t,freeverb:o,dist:e,pans:n,oscs:a}},nt=(s,t,o)=>{s.freeverb.dampening=o.freeverb.dampening,s.freeverb.roomSize.value=o.freeverb.roomSize,s.freeverb.wet.value=o.freeverb.wet,s.dist.distortion=o.dist.distortion,s.dist.wet.value=o.dist.wet,s.pans.forEach((e,n)=>e.pan.value=t.pans[n]),s.oscs.forEach((e,n)=>{e.frequency.value=t.freqs[n],e.volume.value=t.vols[n]})},ot=(s,t,o,e,n,a,i)=>{s.isShadow&&i.background(n.background.shadowColor,n.background.shadowAlpha*s.angleRate),s.isShadow||i.background(n.background.lightColor,n.background.lightAlpha*s.angleRate),i.push(),i.stroke("black"),i.line(t.start.x,t.start.y,t.end.x,t.end.y),i.pop(),i.push(),i.stroke("black"),o.starts.forEach((c,l)=>{const r=o.ends[l];i.line(c.x,c.y,r.x,r.y)}),i.pop(),i.push(),i.noStroke(),e.starts.forEach((c,l)=>{const r=e.ends[l],d=e.intersections[l];i.fill(0,n.shadow.alpha*s.angleRate),i.triangle(c.x,c.y,r.x,r.y,o.ends[l].x,o.ends[l].y);const y=s.isShadow?0:n.background.shadowColor*n.shadow.colorRate;i.fill(y,n.background.shadowAlpha*s.angleRate),i.triangle(c.x,c.y,r.x,r.y,d.x,d.y)}),i.pop(),K(i,a)},lt=s=>{const t=m.setSize("sketch");let o=q.setController();const e=Z();let n,a,i,c,l,r;s.setup=async()=>{r=await st(e),a=O(e,t),n=E(a,e,t),i=W(a,e,t),c=C(n,a,i),s.createCanvas(t,t);const d=q.setGui(s,o,r.se,!1);tt(e,d),s.noLoop()},s.draw=()=>{if(r===void 0){s.noLoop();return}q.updateController(s,o),a=O(e,t,a),n=E(a,e,t,n),i=W(a,e,t,i),c=C(n,a,i),ot(n,a,i,c,e,t,s),l=et(n,i,c,e,t),nt(r,l,e)}};export{lt as sketch};
