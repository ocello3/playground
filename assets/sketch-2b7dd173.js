import{s as b,u as F,D as U,t as h,O as k,d as I,c as y}from"./tools-c877827f.js";import{p as m}from"./index-be582c09.js";import{F as q}from"./Freeverb-5bea2c87.js";import"./CrossFade-960fb31d.js";import"./Split-3e1ffd80.js";const p=(e,t,o)=>{if(o!=null&&t.isUpdate==!1)return o;const n=e.length===0?{dividend:t.euclid.dividend,divisor:t.euclid.divisor}:e.slice(-1)[0];e.length===0&&e.push(n);const i=e.length>t.euclid.thr;if(n.divisor===0||i)return e;const r=n.dividend%n.divisor,s={dividend:n.divisor,divisor:r};return e.push(s),p(e,t)},_=(e,t,o,n)=>{if(n!=null&&t.isUpdate===!1)return n;const i=(()=>{const c=e[0].divisor,a=e[1].divisor,l=Math.floor(e[0].dividend/e[0].divisor);return{x:e[1]===void 0?c:c*l+a,y:c}})(),r=new m.Vector(o/i.x,o/i.y),s=e.map((c,a)=>a%2===0?"x":"y"),d=e.map(c=>{if(c.divisor===0)return[new m.Vector(0,0)];const a=Math.floor(c.dividend/c.divisor);return Array.from(Array(a),()=>m.Vector.mult(r,c.divisor))}),u=d.map((c,a)=>c.map(l=>s[a]==="x"?new m.Vector(l.x,0):new m.Vector(0,l.y))).flat().map((c,a,l)=>a===0?new m.Vector(0,0):l.slice(0,a).reduce((v,f)=>m.Vector.add(v,f))),x=d.map((c,a)=>{const l=a/d.length;return c.map((v,f)=>{const B=d[0][0]===void 0?1:v.x*v.y/(d[0][0].x*d[0][0].y),w=f/c.length;return{area:B,pairIndex:l,rectIndex:w}})}).flat();return{sizes:d.flat(),positions:u,rates:x}},S=()=>({euclid:{dividend:37,divisor:27,thr:10},rect:{h_min:190,h_max:220,s_min:15,s_max:35,b_min:40,b_max:80},synth:{count:15,baseFreq:1e3,volume_min:-25,volume_max:-5},env:{attack:.1,decay:.2,sustain:.8,release:.8},isUpdate:!1}),V=e=>{e.isUpdate===!0&&(e.isUpdate=!1)},z=(e,t)=>{const o=t.pages[1],n=o.addFolder({title:"euclid"});n.addBinding(e.euclid,"dividend",{step:1,min:2,max:1e3}).on("change",()=>e.isUpdate=!0),n.addBinding(e.euclid,"divisor",{step:1,min:2,max:1e3}).on("change",()=>e.isUpdate=!0),n.addBinding(e.euclid,"thr",{step:1,min:2,max:20}),n.addBinding(e,"isUpdate",{readonly:!0});const i=o.addFolder({title:"rect"});i.addBinding(e.rect,"h_min",{step:1,min:0,max:255}),i.addBinding(e.rect,"h_max",{step:1,min:0,max:255}),i.addBinding(e.rect,"s_min",{step:1,min:0,max:255}),i.addBinding(e.rect,"s_max",{step:1,min:0,max:255}),i.addBinding(e.rect,"b_min",{step:1,min:0,max:255}),i.addBinding(e.rect,"b_max",{step:1,min:0,max:255});const r=t.pages[2],s=r.addFolder({title:"synth"});s.addBinding(e.synth,"baseFreq",{step:1,min:100,max:2e3}),s.addBinding(e.synth,"volume_min",{step:1,min:-60,max:-20}),s.addBinding(e.synth,"volume_max",{step:1,min:-20,max:-5});const d=r.addFolder({title:"env"});d.addBinding(e.env,"attack",{min:.1,max:.9}),d.addBinding(e.env,"decay",{min:.1,max:.9}),d.addBinding(e.env,"sustain",{min:.1,max:.9}),d.addBinding(e.env,"release",{min:.1,max:.9})},A=e=>{const t=new k(440,"sine").connect(e);return t.mute=!0,t.start(),t},C=async e=>{const t=await b(),o=new q(.4,e.synth.baseFreq).toDestination(),n=new F(e.env).connect(o),i=Array.from(Array(e.synth.count),()=>A(n));return console.log(U.get()),{se:t,env:n,oscillators:i}},R=(e,t,o)=>{if(o.isUpdate===!1)return;e.env.triggerRelease(),e.env.triggerAttack(o.env.release);const n=t.sizes.length>o.synth.count?o.synth.count:t.sizes.length,i=t.rates.map(s=>o.synth.baseFreq*s.pairIndex*s.rectIndex),r=t.rates.map(s=>h.map(s.area/n,0,1,o.synth.volume_min,o.synth.volume_max));e.oscillators.forEach((s,d)=>{if(d>t.sizes.length-1)return;const g=i[d],u=r[d];s.frequency.value=g,s.volume.value=u})},D=(e,t,o,n)=>{n.push(),n.noStroke(),e.sizes.forEach((i,r)=>{const s=e.positions[r],d=e.rates[r],g=h.map(d.area,0,1,t.rect.h_min,t.rect.h_max),u=h.map(d.pairIndex,0,1,t.rect.s_max,t.rect.s_min),x=h.map(d.rectIndex,0,1,t.rect.b_min,t.rect.b_max);n.fill(g,u,x),n.rect(s.x,s.y,i.x,i.y)}),n.pop(),I(n,o)},G=e=>{const t=h.setSize("sketch");let o=y.setController();const n=S();let i,r,s;e.setup=async()=>{s=await C(n),i=p([],n),r=_(i,n,t),e.createCanvas(t,t);const d=y.setGui(e,o,s.se,!1);z(n,d),e.colorMode(e.HSB),e.noLoop()},e.draw=()=>{if(s===void 0){e.noLoop();return}e.background(255),y.updateController(e,o),i=p([],n,i),r=_(i,n,t,r),D(r,n,t,e),e.frameCount>1&&R(s,r,n),V(n)}};export{G as sketch};
